/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockContractContract
  extends Truffle.Contract<MockContractInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MockContractInstance>;
}

type AllEvents = never;

export interface MockContractInstance extends Truffle.ContractInstance {
  DEFAULT_FALLBACK_VALUE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MOCKS_LIST_END(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MOCKS_LIST_END_HASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MOCKS_LIST_START(txDetails?: Truffle.TransactionDetails): Promise<string>;

  SENTINEL_ANY_MOCKS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  givenAnyReturn: {
    (response: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenAnyReturnAddress: {
    (response: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenAnyReturnBool: {
    (response: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenAnyReturnUint: {
    (
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenAnyRevert: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  givenAnyRevertWithMessage: {
    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenAnyRunOutOfGas: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  givenCalldataReturn: {
    (
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataReturnAddress: {
    (
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataReturnBool: {
    (
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataReturnUint: {
    (
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataRevert: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataRevertWithMessage: {
    (
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenCalldataRunOutOfGas: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodReturn: {
    (
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodReturnAddress: {
    (
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodReturnBool: {
    (
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodReturnUint: {
    (
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      response: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodRevert: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodRevertWithMessage: {
    (
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  givenMethodRunOutOfGas: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  invocationCount: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  invocationCountForCalldata: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  invocationCountForMethod: {
    (call: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(call: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      call: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reset: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateInvocationCount: {
    (
      methodId: string,
      originalMsgData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      methodId: string,
      originalMsgData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      methodId: string,
      originalMsgData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      methodId: string,
      originalMsgData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    DEFAULT_FALLBACK_VALUE(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    MOCKS_LIST_END(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MOCKS_LIST_END_HASH(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    MOCKS_LIST_START(txDetails?: Truffle.TransactionDetails): Promise<string>;

    SENTINEL_ANY_MOCKS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    givenAnyReturn: {
      (response: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenAnyReturnAddress: {
      (response: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenAnyReturnBool: {
      (response: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenAnyReturnUint: {
      (
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenAnyRevert: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    givenAnyRevertWithMessage: {
      (message: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenAnyRunOutOfGas: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    givenCalldataReturn: {
      (
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataReturnAddress: {
      (
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataReturnBool: {
      (
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataReturnUint: {
      (
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataRevert: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataRevertWithMessage: {
      (
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenCalldataRunOutOfGas: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodReturn: {
      (
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodReturnAddress: {
      (
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodReturnBool: {
      (
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodReturnUint: {
      (
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        response: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodRevert: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodRevertWithMessage: {
      (
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        message: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    givenMethodRunOutOfGas: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    invocationCount: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    invocationCountForCalldata: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    invocationCountForMethod: {
      (call: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(call: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        call: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reset: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    updateInvocationCount: {
      (
        methodId: string,
        originalMsgData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        methodId: string,
        originalMsgData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        methodId: string,
        originalMsgData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        methodId: string,
        originalMsgData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
