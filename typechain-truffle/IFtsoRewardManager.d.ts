/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFtsoRewardManagerContract
  extends Truffle.Contract<IFtsoRewardManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFtsoRewardManagerInstance>;
}

export interface FeePercentageChanged {
  name: "FeePercentageChanged";
  args: {
    dataProvider: string;
    value: BN;
    validFromEpoch: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface FtsoRewardManagerActivated {
  name: "FtsoRewardManagerActivated";
  args: {
    ftsoRewardManager: string;
    0: string;
  };
}

export interface FtsoRewardManagerDeactivated {
  name: "FtsoRewardManagerDeactivated";
  args: {
    ftsoRewardManager: string;
    0: string;
  };
}

export interface RewardClaimed {
  name: "RewardClaimed";
  args: {
    dataProvider: string;
    whoClaimed: string;
    sentTo: string;
    rewardEpoch: BN;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface RewardClaimsEnabled {
  name: "RewardClaimsEnabled";
  args: {
    rewardEpochId: BN;
    0: BN;
  };
}

export interface RewardClaimsExpired {
  name: "RewardClaimsExpired";
  args: {
    rewardEpochId: BN;
    0: BN;
  };
}

export interface RewardsDistributed {
  name: "RewardsDistributed";
  args: {
    ftso: string;
    epochId: BN;
    addresses: string[];
    rewards: BN[];
    0: string;
    1: BN;
    2: string[];
    3: BN[];
  };
}

export interface UnearnedRewardsAccrued {
  name: "UnearnedRewardsAccrued";
  args: {
    epochId: BN;
    reward: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | FeePercentageChanged
  | FtsoRewardManagerActivated
  | FtsoRewardManagerDeactivated
  | RewardClaimed
  | RewardClaimsEnabled
  | RewardClaimsExpired
  | RewardsDistributed
  | UnearnedRewardsAccrued;

export interface IFtsoRewardManagerInstance extends Truffle.ContractInstance {
  active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  autoClaim: {
    (
      _rewardOwners: string[],
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwners: string[],
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardOwners: string[],
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwners: string[],
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claim: {
    (
      _rewardOwner: string,
      _recipient: string,
      _rewardEpoch: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpoch: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpoch: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpoch: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimFromDataProviders: {
    (
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimReward: {
    (
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimRewardFromDataProviders: {
    (
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipient: string,
      _rewardEpochs: (number | BN | string)[],
      _dataProviders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getClaimedReward(
    _rewardEpoch: number | BN | string,
    _dataProvider: string,
    _claimer: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN }>;

  getCurrentRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getDataProviderCurrentFeePercentage(
    _dataProvider: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDataProviderFeePercentage(
    _dataProvider: string,
    _rewardEpoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDataProviderPerformanceInfo(
    _rewardEpoch: number | BN | string,
    _dataProvider: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getDataProviderScheduledFeePercentageChanges(
    _dataProvider: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: BN[]; 2: boolean[] }>;

  getEpochReward(
    _rewardEpoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getEpochsWithClaimableRewards(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getEpochsWithUnclaimedRewards(
    _beneficiary: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getInitialRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRewardEpochToExpireNext(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRewardEpochVotePowerBlock(
    _rewardEpoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStateOfRewards(
    _beneficiary: string,
    _rewardEpoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[]; 2: boolean[]; 3: boolean }>;

  getStateOfRewardsFromDataProviders(
    _beneficiary: string,
    _rewardEpoch: number | BN | string,
    _dataProviders: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: boolean[]; 2: boolean }>;

  nextClaimableRewardEpoch(
    _rewardOwner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setDataProviderFeePercentage: {
    (
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    autoClaim: {
      (
        _rewardOwners: string[],
        _rewardEpoch: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwners: string[],
        _rewardEpoch: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardOwners: string[],
        _rewardEpoch: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwners: string[],
        _rewardEpoch: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claim: {
      (
        _rewardOwner: string,
        _recipient: string,
        _rewardEpoch: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpoch: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpoch: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpoch: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimFromDataProviders: {
      (
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimReward: {
      (
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimRewardFromDataProviders: {
      (
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipient: string,
        _rewardEpochs: (number | BN | string)[],
        _dataProviders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getClaimedReward(
      _rewardEpoch: number | BN | string,
      _dataProvider: string,
      _claimer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN }>;

    getCurrentRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDataProviderFeePercentage(
      _dataProvider: string,
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDataProviderPerformanceInfo(
      _rewardEpoch: number | BN | string,
      _dataProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: BN[]; 2: boolean[] }>;

    getEpochReward(
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getEpochsWithClaimableRewards(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getInitialRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRewardEpochToExpireNext(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: boolean[]; 3: boolean }>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: number | BN | string,
      _dataProviders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: boolean[]; 2: boolean }>;

    nextClaimableRewardEpoch(
      _rewardOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setDataProviderFeePercentage: {
      (
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
