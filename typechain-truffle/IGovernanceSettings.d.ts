/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IGovernanceSettingsContract
  extends Truffle.Contract<IGovernanceSettingsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IGovernanceSettingsInstance>;
}

type AllEvents = never;

export interface IGovernanceSettingsInstance extends Truffle.ContractInstance {
  getExecutors(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getGovernanceAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getTimelock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isExecutor(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    getExecutors(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getGovernanceAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getTimelock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    isExecutor(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
