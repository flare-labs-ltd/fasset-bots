/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AddressUpdatableMockContract
  extends Truffle.Contract<AddressUpdatableMockInstance> {
  "new"(
    _addressUpdater: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AddressUpdatableMockInstance>;
}

type AllEvents = never;

export interface AddressUpdatableMockInstance extends Truffle.ContractInstance {
  contractAddresses(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  contractNameHashes(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressUpdater(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getContractNameHashesAndAddresses(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: string[] }>;

  updateContractAddresses: {
    (
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    contractAddresses(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    contractNameHashes(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAddressUpdater(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getContractNameHashesAndAddresses(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;

    updateContractAddresses: {
      (
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
