/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AgentsCreateDestroyContract
  extends Truffle.Contract<AgentsCreateDestroyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AgentsCreateDestroyInstance>;
}

export interface AgentDestroyAnnounced {
  name: "AgentDestroyAnnounced";
  args: {
    agentVault: string;
    destroyAllowedAt: BN;
    0: string;
    1: BN;
  };
}

export interface AgentDestroyed {
  name: "AgentDestroyed";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface AgentVaultCreated {
  name: "AgentVaultCreated";
  args: {
    owner: string;
    agentVault: string;
    collateralPool: string;
    underlyingAddress: string;
    vaultCollateralToken: string;
    feeBIPS: BN;
    poolFeeShareBIPS: BN;
    mintingVaultCollateralRatioBIPS: BN;
    mintingPoolCollateralRatioBIPS: BN;
    buyFAssetByAgentFactorBIPS: BN;
    poolExitCollateralRatioBIPS: BN;
    poolTopupCollateralRatioBIPS: BN;
    poolTopupTokenPriceFactorBIPS: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
    10: BN;
    11: BN;
    12: BN;
  };
}

export interface CurrentUnderlyingBlockUpdated {
  name: "CurrentUnderlyingBlockUpdated";
  args: {
    underlyingBlockNumber: BN;
    underlyingBlockTimestamp: BN;
    updatedAt: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | AgentDestroyAnnounced
  | AgentDestroyed
  | AgentVaultCreated
  | CurrentUnderlyingBlockUpdated;

export interface AgentsCreateDestroyInstance extends Truffle.ContractInstance {
  methods: {};

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
