/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IIFtsoContract extends Truffle.Contract<IIFtsoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IIFtsoInstance>;
}

export interface LowTurnout {
  name: "LowTurnout";
  args: {
    epochId: BN;
    natTurnout: BN;
    lowNatTurnoutThresholdBIPS: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface PriceEpochInitializedOnFtso {
  name: "PriceEpochInitializedOnFtso";
  args: {
    epochId: BN;
    endTime: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface PriceFinalized {
  name: "PriceFinalized";
  args: {
    epochId: BN;
    price: BN;
    rewardedFtso: boolean;
    lowRewardPrice: BN;
    highRewardPrice: BN;
    finalizationType: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: boolean;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface PriceRevealed {
  name: "PriceRevealed";
  args: {
    voter: string;
    epochId: BN;
    price: BN;
    timestamp: BN;
    votePowerNat: BN;
    votePowerAsset: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

type AllEvents =
  | LowTurnout
  | PriceEpochInitializedOnFtso
  | PriceFinalized
  | PriceRevealed;

export interface IIFtsoInstance extends Truffle.ContractInstance {
  activateFtso: {
    (
      _firstEpochStartTs: number | BN | string,
      _submitPeriodSeconds: number | BN | string,
      _revealPeriodSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _firstEpochStartTs: number | BN | string,
      _submitPeriodSeconds: number | BN | string,
      _revealPeriodSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _firstEpochStartTs: number | BN | string,
      _submitPeriodSeconds: number | BN | string,
      _revealPeriodSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _firstEpochStartTs: number | BN | string,
      _submitPeriodSeconds: number | BN | string,
      _revealPeriodSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  configureEpochs: {
    (
      _maxVotePowerNatThresholdFraction: number | BN | string,
      _maxVotePowerAssetThresholdFraction: number | BN | string,
      _lowAssetUSDThreshold: number | BN | string,
      _highAssetUSDThreshold: number | BN | string,
      _highAssetTurnoutThresholdBIPS: number | BN | string,
      _lowNatTurnoutThresholdBIPS: number | BN | string,
      _trustedAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _maxVotePowerNatThresholdFraction: number | BN | string,
      _maxVotePowerAssetThresholdFraction: number | BN | string,
      _lowAssetUSDThreshold: number | BN | string,
      _highAssetUSDThreshold: number | BN | string,
      _highAssetTurnoutThresholdBIPS: number | BN | string,
      _lowNatTurnoutThresholdBIPS: number | BN | string,
      _trustedAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _maxVotePowerNatThresholdFraction: number | BN | string,
      _maxVotePowerAssetThresholdFraction: number | BN | string,
      _lowAssetUSDThreshold: number | BN | string,
      _highAssetUSDThreshold: number | BN | string,
      _highAssetTurnoutThresholdBIPS: number | BN | string,
      _lowNatTurnoutThresholdBIPS: number | BN | string,
      _trustedAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _maxVotePowerNatThresholdFraction: number | BN | string,
      _maxVotePowerAssetThresholdFraction: number | BN | string,
      _lowAssetUSDThreshold: number | BN | string,
      _highAssetUSDThreshold: number | BN | string,
      _highAssetTurnoutThresholdBIPS: number | BN | string,
      _lowNatTurnoutThresholdBIPS: number | BN | string,
      _trustedAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deactivateFtso: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  epochsConfiguration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: string[] }>;

  fallbackFinalizePriceEpoch: {
    (
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePriceEpoch: {
    (
      _epochId: number | BN | string,
      _returnRewardData: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _epochId: number | BN | string,
      _returnRewardData: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN }>;
    sendTransaction(
      _epochId: number | BN | string,
      _returnRewardData: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _epochId: number | BN | string,
      _returnRewardData: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  forceFinalizePriceEpoch: {
    (
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ftsoManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAssetFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getCurrentEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentPrice(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getCurrentPriceDetails(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

  getCurrentPriceFromTrustedProviders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getCurrentPriceWithDecimals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getCurrentPriceWithDecimalsFromTrustedProviders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getEpochId(
    _timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getEpochPrice(
    _epochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getEpochPriceForVoter(
    _epochId: number | BN | string,
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPriceEpochConfiguration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getPriceEpochData(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

  getRandom(
    _epochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoteWeightingParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[]; 2: BN; 3: BN; 4: BN; 5: BN }>;

  initializeCurrentEpochStateForReveal: {
    (
      _circulatingSupplyNat: number | BN | string,
      _fallbackMode: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _circulatingSupplyNat: number | BN | string,
      _fallbackMode: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _circulatingSupplyNat: number | BN | string,
      _fallbackMode: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _circulatingSupplyNat: number | BN | string,
      _fallbackMode: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revealPriceSubmitter: {
    (
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _wNatVP: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _wNatVP: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _wNatVP: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _wNatVP: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAsset: {
    (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_asset: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAssetFtsos: {
    (_assetFtsos: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _assetFtsos: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _assetFtsos: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _assetFtsos: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVotePowerBlock: {
    (
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  updateInitialPrice: {
    (
      _initialPriceUSD: number | BN | string,
      _initialPriceTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _initialPriceUSD: number | BN | string,
      _initialPriceTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _initialPriceUSD: number | BN | string,
      _initialPriceTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _initialPriceUSD: number | BN | string,
      _initialPriceTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wNatVotePowerCached: {
    (
      _voter: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _voter: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _voter: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    activateFtso: {
      (
        _firstEpochStartTs: number | BN | string,
        _submitPeriodSeconds: number | BN | string,
        _revealPeriodSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _firstEpochStartTs: number | BN | string,
        _submitPeriodSeconds: number | BN | string,
        _revealPeriodSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _firstEpochStartTs: number | BN | string,
        _submitPeriodSeconds: number | BN | string,
        _revealPeriodSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _firstEpochStartTs: number | BN | string,
        _submitPeriodSeconds: number | BN | string,
        _revealPeriodSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    configureEpochs: {
      (
        _maxVotePowerNatThresholdFraction: number | BN | string,
        _maxVotePowerAssetThresholdFraction: number | BN | string,
        _lowAssetUSDThreshold: number | BN | string,
        _highAssetUSDThreshold: number | BN | string,
        _highAssetTurnoutThresholdBIPS: number | BN | string,
        _lowNatTurnoutThresholdBIPS: number | BN | string,
        _trustedAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _maxVotePowerNatThresholdFraction: number | BN | string,
        _maxVotePowerAssetThresholdFraction: number | BN | string,
        _lowAssetUSDThreshold: number | BN | string,
        _highAssetUSDThreshold: number | BN | string,
        _highAssetTurnoutThresholdBIPS: number | BN | string,
        _lowNatTurnoutThresholdBIPS: number | BN | string,
        _trustedAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _maxVotePowerNatThresholdFraction: number | BN | string,
        _maxVotePowerAssetThresholdFraction: number | BN | string,
        _lowAssetUSDThreshold: number | BN | string,
        _highAssetUSDThreshold: number | BN | string,
        _highAssetTurnoutThresholdBIPS: number | BN | string,
        _lowNatTurnoutThresholdBIPS: number | BN | string,
        _trustedAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _maxVotePowerNatThresholdFraction: number | BN | string,
        _maxVotePowerAssetThresholdFraction: number | BN | string,
        _lowAssetUSDThreshold: number | BN | string,
        _highAssetUSDThreshold: number | BN | string,
        _highAssetTurnoutThresholdBIPS: number | BN | string,
        _lowNatTurnoutThresholdBIPS: number | BN | string,
        _trustedAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deactivateFtso: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    epochsConfiguration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: string[] }>;

    fallbackFinalizePriceEpoch: {
      (
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalizePriceEpoch: {
      (
        _epochId: number | BN | string,
        _returnRewardData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _epochId: number | BN | string,
        _returnRewardData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string[]; 1: BN[]; 2: BN }>;
      sendTransaction(
        _epochId: number | BN | string,
        _returnRewardData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _epochId: number | BN | string,
        _returnRewardData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    forceFinalizePriceEpoch: {
      (
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ftsoManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAssetFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getCurrentEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentPrice(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getCurrentPriceDetails(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

    getCurrentPriceFromTrustedProviders(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getCurrentPriceWithDecimals(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getCurrentPriceWithDecimalsFromTrustedProviders(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getEpochId(
      _timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getEpochPrice(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getEpochPriceForVoter(
      _epochId: number | BN | string,
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPriceEpochConfiguration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getPriceEpochData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

    getRandom(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoteWeightingParameters(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN; 3: BN; 4: BN; 5: BN }>;

    initializeCurrentEpochStateForReveal: {
      (
        _circulatingSupplyNat: number | BN | string,
        _fallbackMode: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _circulatingSupplyNat: number | BN | string,
        _fallbackMode: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _circulatingSupplyNat: number | BN | string,
        _fallbackMode: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _circulatingSupplyNat: number | BN | string,
        _fallbackMode: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revealPriceSubmitter: {
      (
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _wNatVP: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _wNatVP: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _wNatVP: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _wNatVP: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAsset: {
      (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAssetFtsos: {
      (_assetFtsos: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _assetFtsos: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _assetFtsos: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _assetFtsos: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setVotePowerBlock: {
      (
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    updateInitialPrice: {
      (
        _initialPriceUSD: number | BN | string,
        _initialPriceTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _initialPriceUSD: number | BN | string,
        _initialPriceTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _initialPriceUSD: number | BN | string,
        _initialPriceTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _initialPriceUSD: number | BN | string,
        _initialPriceTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wNatVotePowerCached: {
      (
        _voter: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _voter: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _voter: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
