/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILiquidatorContract
  extends Truffle.Contract<ILiquidatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILiquidatorInstance>;
}

type AllEvents = never;

export interface ILiquidatorInstance extends Truffle.ContractInstance {
  onFlashLoan: {
    (
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runArbitrage: {
    (
      _agentVault: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runArbitrageWithCustomParams: {
    (
      _agentVault: string,
      _flashLender: string,
      _blazeswap: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _flashLender: string,
      _blazeswap: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _flashLender: string,
      _blazeswap: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _flashLender: string,
      _blazeswap: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    onFlashLoan: {
      (
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    runArbitrage: {
      (
        _agentVault: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    runArbitrageWithCustomParams: {
      (
        _agentVault: string,
        _flashLender: string,
        _blazeswap: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _flashLender: string,
        _blazeswap: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _flashLender: string,
        _blazeswap: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _flashLender: string,
        _blazeswap: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
