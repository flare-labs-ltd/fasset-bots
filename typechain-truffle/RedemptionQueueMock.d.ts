/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RedemptionQueueMockContract
  extends Truffle.Contract<RedemptionQueueMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RedemptionQueueMockInstance>;
}

type AllEvents = never;

export interface RedemptionQueueMockInstance extends Truffle.ContractInstance {
  createRedemptionTicket: {
    (
      _agentVault: string,
      _valueAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _valueAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _valueAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _valueAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteRedemptionTicket: {
    (
      _ticketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _ticketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _ticketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ticketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTicket(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    agentVault: string;
    valueAMG: BN;
    prev: BN;
    next: BN;
    prevForAgent: BN;
    nextForAgent: BN;
  }>;

  methods: {
    createRedemptionTicket: {
      (
        _agentVault: string,
        _valueAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _valueAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _valueAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _valueAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deleteRedemptionTicket: {
      (
        _ticketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _ticketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _ticketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _ticketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTicket(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      agentVault: string;
      valueAMG: BN;
      prev: BN;
      next: BN;
      prevForAgent: BN;
      nextForAgent: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
