/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IDelegationAccountContract
  extends Truffle.Contract<IDelegationAccountInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDelegationAccountInstance>;
}

export interface DelegateFtso {
  name: "DelegateFtso";
  args: {
    to: string;
    bips: BN;
    0: string;
    1: BN;
  };
}

export interface DelegateGovernance {
  name: "DelegateGovernance";
  args: {
    to: string;
    0: string;
  };
}

export interface ExecutorFeePaid {
  name: "ExecutorFeePaid";
  args: {
    executor: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface ExternalTokenTransferred {
  name: "ExternalTokenTransferred";
  args: {
    token: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Initialize {
  name: "Initialize";
  args: {
    owner: string;
    manager: string;
    0: string;
    1: string;
  };
}

export interface RevokeFtso {
  name: "RevokeFtso";
  args: {
    to: string;
    blockNumber: BN;
    0: string;
    1: BN;
  };
}

export interface UndelegateAllFtso {
  name: "UndelegateAllFtso";
  args: {};
}

export interface UndelegateGovernance {
  name: "UndelegateGovernance";
  args: {};
}

export interface WithdrawToOwner {
  name: "WithdrawToOwner";
  args: {
    amount: BN;
    0: BN;
  };
}

type AllEvents =
  | DelegateFtso
  | DelegateGovernance
  | ExecutorFeePaid
  | ExternalTokenTransferred
  | Initialize
  | RevokeFtso
  | UndelegateAllFtso
  | UndelegateGovernance
  | WithdrawToOwner;

export interface IDelegationAccountInstance extends Truffle.ContractInstance {
  methods: {};

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
