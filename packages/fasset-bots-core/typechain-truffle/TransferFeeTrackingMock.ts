/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TransferFeeTrackingMockContract
  extends Truffle.Contract<TransferFeeTrackingMockInstance> {
  "new"(
    _firstEpochStartTs: number | BN | string,
    _epochDuration: number | BN | string,
    _maxUnexpiredEpochs: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TransferFeeTrackingMockInstance>;
}

export type AllEvents = never;

export interface TransferFeeTrackingMockInstance
  extends Truffle.ContractInstance {
  addFees: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  agentFeeShare(
    _agentVault: string,
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  agentMinted(
    _agent: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateAgentFeeShare(
    _agentVault: string,
    _maxClaimEpochs: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  claimFees: {
    (
      _agentVault: string,
      _maxClaimEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _maxClaimEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(
      _agentVault: string,
      _maxClaimEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _maxClaimEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currentEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  epochClaimable(
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  epochTimestamp(
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  initMintingHistory: {
    (
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reinitialize: {
    (
      _firstEpochStartTs: number | BN | string,
      _epochDuration: number | BN | string,
      _maxUnexpiredEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _firstEpochStartTs: number | BN | string,
      _epochDuration: number | BN | string,
      _maxUnexpiredEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _firstEpochStartTs: number | BN | string,
      _epochDuration: number | BN | string,
      _maxUnexpiredEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _firstEpochStartTs: number | BN | string,
      _epochDuration: number | BN | string,
      _maxUnexpiredEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalMinted(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferFeeCalculationDataForAgent(
    _agentVault: string,
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    totalFees: BN;
    cumulativeMinted: BN;
    totalCumulativeMinted: BN;
    claimable: boolean;
    claimed: boolean;
  }>;

  transferFeeEpochData(
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    startTs: BN;
    endTs: BN;
    totalFees: BN;
    claimedFees: BN;
    claimable: boolean;
    expired: boolean;
  }>;

  transferFeeSettings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    firstEpochStartTs: BN;
    epochDuration: BN;
    maxUnexpiredEpochs: BN;
    firstClaimableEpoch: BN;
  }>;

  updateMintingHistory: {
    (
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountAMG: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addFees: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    agentFeeShare(
      _agentVault: string,
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    agentMinted(
      _agent: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateAgentFeeShare(
      _agentVault: string,
      _maxClaimEpochs: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    claimFees: {
      (
        _agentVault: string,
        _maxClaimEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _maxClaimEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(
        _agentVault: string,
        _maxClaimEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _maxClaimEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    currentEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    epochClaimable(
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    epochTimestamp(
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    initMintingHistory: {
      (
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reinitialize: {
      (
        _firstEpochStartTs: number | BN | string,
        _epochDuration: number | BN | string,
        _maxUnexpiredEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _firstEpochStartTs: number | BN | string,
        _epochDuration: number | BN | string,
        _maxUnexpiredEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _firstEpochStartTs: number | BN | string,
        _epochDuration: number | BN | string,
        _maxUnexpiredEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _firstEpochStartTs: number | BN | string,
        _epochDuration: number | BN | string,
        _maxUnexpiredEpochs: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    totalMinted(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transferFeeCalculationDataForAgent(
      _agentVault: string,
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      totalFees: BN;
      cumulativeMinted: BN;
      totalCumulativeMinted: BN;
      claimable: boolean;
      claimed: boolean;
    }>;

    transferFeeEpochData(
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      startTs: BN;
      endTs: BN;
      totalFees: BN;
      claimedFees: BN;
      claimable: boolean;
      expired: boolean;
    }>;

    transferFeeSettings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      firstEpochStartTs: BN;
      epochDuration: BN;
      maxUnexpiredEpochs: BN;
      firstClaimableEpoch: BN;
    }>;

    updateMintingHistory: {
      (
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountAMG: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
