/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RandomNumberV2InterfaceContract
  extends Truffle.Contract<RandomNumberV2InterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RandomNumberV2InterfaceInstance>;
}

export type AllEvents = never;

export interface RandomNumberV2InterfaceInstance
  extends Truffle.ContractInstance {
  getRandomNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: BN }>;

  getRandomNumberHistorical(
    _votingRoundId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: BN }>;

  methods: {
    getRandomNumber(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: BN }>;

    getRandomNumberHistorical(
      _votingRoundId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
