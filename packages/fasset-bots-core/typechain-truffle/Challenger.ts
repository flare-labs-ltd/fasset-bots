/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ChallengerContract
  extends Truffle.Contract<ChallengerInstance> {
  "new"(
    _flashLender: string,
    _dex: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ChallengerInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export type AllEvents = OwnershipTransferred;

export interface ChallengerInstance extends Truffle.ContractInstance {
  dex(txDetails?: Truffle.TransactionDetails): Promise<string>;

  doublePaymentChallenge: {
    (
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  flashLender(txDetails?: Truffle.TransactionDetails): Promise<string>;

  freeBalanceNegativeChallenge: {
    (
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  illegalPaymentChallenge: {
    (
      _transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  maxSlippageToMinPrices(
    _maxSlippageBipsDex1: number | BN | string,
    _maxSlippageBipsDex2: number | BN | string,
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  onFlashLoan: {
    (
      arg0: string,
      _token: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      _token: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      _token: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      _token: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  runArbitrage: {
    (
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawNat: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawToken: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    dex(txDetails?: Truffle.TransactionDetails): Promise<string>;

    doublePaymentChallenge: {
      (
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    flashLender(txDetails?: Truffle.TransactionDetails): Promise<string>;

    freeBalanceNegativeChallenge: {
      (
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    illegalPaymentChallenge: {
      (
        _transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    maxSlippageToMinPrices(
      _maxSlippageBipsDex1: number | BN | string,
      _maxSlippageBipsDex2: number | BN | string,
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    onFlashLoan: {
      (
        arg0: string,
        _token: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        _token: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        arg0: string,
        _token: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        _token: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    runArbitrage: {
      (
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawNat: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    withdrawToken: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
