/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILiquidatorContract
  extends Truffle.Contract<ILiquidatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILiquidatorInstance>;
}

export type AllEvents = never;

export interface ILiquidatorInstance extends Truffle.ContractInstance {
  maxSlippageToMinPrices(
    _maxSlippageBipsDex1: number | BN | string,
    _maxSlippageBipsDex2: number | BN | string,
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  onFlashLoan: {
    (
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      initiator: string,
      token: string,
      amount: number | BN | string,
      fee: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runArbitrage: {
    (
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _profitTo: string,
      _config: {
        flashLender: string;
        maxFlashFee: number | BN | string;
        dex: string;
        dexPair1: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
        dexPair2: {
          path: string[];
          minPriceMul: number | BN | string;
          minPriceDiv: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawNat: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawToken: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    maxSlippageToMinPrices(
      _maxSlippageBipsDex1: number | BN | string,
      _maxSlippageBipsDex2: number | BN | string,
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    onFlashLoan: {
      (
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        initiator: string,
        token: string,
        amount: number | BN | string,
        fee: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    runArbitrage: {
      (
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _profitTo: string,
        _config: {
          flashLender: string;
          maxFlashFee: number | BN | string;
          dex: string;
          dexPair1: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
          dexPair2: {
            path: string[];
            minPriceMul: number | BN | string;
            minPriceDiv: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawNat: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    withdrawToken: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
