/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPricePublisherContract
  extends Truffle.Contract<IPricePublisherInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPricePublisherInstance>;
}

export type AllEvents = never;

export interface IPricePublisherInstance extends Truffle.ContractInstance {
  getFeedId(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFeedIds(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getFeedIdsWithDecimals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[] }>;

  getSymbols(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getTrustedProviders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  publishPrices: {
    (
      _proofs: {
        proof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proofs: {
        proof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proofs: {
        proof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proofs: {
        proof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTrustedPrices: {
    (
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getFeedId(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFeedIds(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getFeedIdsWithDecimals(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[] }>;

    getSymbols(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getTrustedProviders(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    publishPrices: {
      (
        _proofs: {
          proof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proofs: {
          proof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proofs: {
          proof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proofs: {
          proof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitTrustedPrices: {
      (
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
