/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ITransferFeesContract
  extends Truffle.Contract<ITransferFeesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ITransferFeesInstance>;
}

export interface TransferFeeChangeScheduled {
  name: "TransferFeeChangeScheduled";
  args: {
    nextTransferFeeMillionths: BN;
    scheduledAt: BN;
    0: BN;
    1: BN;
  };
}

export interface TransferFeesClaimed {
  name: "TransferFeesClaimed";
  args: {
    agentVault: string;
    recipient: string;
    agentClaimedUBA: BN;
    poolClaimedUBA: BN;
    remainingUnclaimedEpochs: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
  };
}

export type AllEvents = TransferFeeChangeScheduled | TransferFeesClaimed;

export interface ITransferFeesInstance extends Truffle.ContractInstance {
  agentTransferFeeShare(
    _agentVault: string,
    _maxEpochsToClaim: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  agentTransferFeeShareForEpoch(
    _agentVault: string,
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  agentUnclaimedTransferFeeEpochs(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  claimTransferFees: {
    (
      _agentVault: string,
      _recipient: string,
      _maxEpochsToClaim: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _recipient: string,
      _maxEpochsToClaim: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
    sendTransaction(
      _agentVault: string,
      _recipient: string,
      _maxEpochsToClaim: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _recipient: string,
      _maxEpochsToClaim: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currentTransferFeeEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  fassetTransferFeePaid: {
    (
      _fee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _fee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  firstClaimableTransferFeeEpoch(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  initAgentsMintingHistory: {
    (_agentVaults: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVaults: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVaults: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVaults: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransferFeeMillionths: {
    (
      _value: number | BN | string,
      _scheduledAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      _scheduledAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      _scheduledAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      _scheduledAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFeeCalculationDataForAgent(
    _agentVault: string,
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    totalFees: BN;
    cumulativeMinted: BN;
    totalCumulativeMinted: BN;
    claimable: boolean;
    claimed: boolean;
  }>;

  transferFeeEpochData(
    _epoch: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    startTs: BN;
    endTs: BN;
    totalFees: BN;
    claimedFees: BN;
    claimable: boolean;
    expired: boolean;
  }>;

  transferFeeMillionths(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferFeeSettings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    transferFeeMillionths: BN;
    firstEpochStartTs: BN;
    epochDuration: BN;
    maxUnexpiredEpochs: BN;
    firstClaimableEpoch: BN;
  }>;

  methods: {
    agentTransferFeeShare(
      _agentVault: string,
      _maxEpochsToClaim: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    agentTransferFeeShareForEpoch(
      _agentVault: string,
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    agentUnclaimedTransferFeeEpochs(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    claimTransferFees: {
      (
        _agentVault: string,
        _recipient: string,
        _maxEpochsToClaim: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _recipient: string,
        _maxEpochsToClaim: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN }>;
      sendTransaction(
        _agentVault: string,
        _recipient: string,
        _maxEpochsToClaim: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _recipient: string,
        _maxEpochsToClaim: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    currentTransferFeeEpoch(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    fassetTransferFeePaid: {
      (
        _fee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _fee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    firstClaimableTransferFeeEpoch(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    initAgentsMintingHistory: {
      (_agentVaults: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVaults: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVaults: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVaults: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTransferFeeMillionths: {
      (
        _value: number | BN | string,
        _scheduledAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        _scheduledAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        _scheduledAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        _scheduledAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferFeeCalculationDataForAgent(
      _agentVault: string,
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      totalFees: BN;
      cumulativeMinted: BN;
      totalCumulativeMinted: BN;
      claimable: boolean;
      claimed: boolean;
    }>;

    transferFeeEpochData(
      _epoch: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      startTs: BN;
      endTs: BN;
      totalFees: BN;
      claimedFees: BN;
      claimable: boolean;
      expired: boolean;
    }>;

    transferFeeMillionths(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transferFeeSettings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      transferFeeMillionths: BN;
      firstEpochStartTs: BN;
      epochDuration: BN;
      maxUnexpiredEpochs: BN;
      firstClaimableEpoch: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
