/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FtsoV2PriceStoreMockContract
  extends Truffle.Contract<FtsoV2PriceStoreMockInstance> {
  "new"(
    _governanceSettings: string,
    _initialGovernance: string,
    _addressUpdater: string,
    _firstVotingRoundStartTs: number | BN | string,
    _votingEpochDurationSeconds: number | BN | string,
    _ftsoProtocolId: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<FtsoV2PriceStoreMockInstance>;
}

export interface GovernanceCallTimelocked {
  name: "GovernanceCallTimelocked";
  args: {
    encodedCall: string;
    encodedCallHash: string;
    allowedAfterTimestamp: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface GovernanceInitialised {
  name: "GovernanceInitialised";
  args: {
    initialGovernance: string;
    0: string;
  };
}

export interface GovernedProductionModeEntered {
  name: "GovernedProductionModeEntered";
  args: {
    governanceSettings: string;
    0: string;
  };
}

export interface PricesPublished {
  name: "PricesPublished";
  args: {
    votingRoundId: BN;
    0: BN;
  };
}

export interface TimelockedGovernanceCallCanceled {
  name: "TimelockedGovernanceCallCanceled";
  args: {
    encodedCallHash: string;
    0: string;
  };
}

export interface TimelockedGovernanceCallExecuted {
  name: "TimelockedGovernanceCallExecuted";
  args: {
    encodedCallHash: string;
    0: string;
  };
}

export type AllEvents =
  | GovernanceCallTimelocked
  | GovernanceInitialised
  | GovernedProductionModeEntered
  | PricesPublished
  | TimelockedGovernanceCallCanceled
  | TimelockedGovernanceCallExecuted;

export interface FtsoV2PriceStoreMockInstance extends Truffle.ContractInstance {
  cancelGovernanceCall: {
    (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeGovernanceCall: {
    (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePrices: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  firstVotingRoundStartTs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  ftsoProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAddressUpdater(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getFeedId(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFeedIds(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getFeedIdsWithDecimals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[] }>;

  getPrice(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getPriceFromTrustedProviders(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getTrustedProviders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  governanceSettings(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialise: {
    (
      _governanceSettings: string,
      _initialGovernance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _governanceSettings: string,
      _initialGovernance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governanceSettings: string,
      _initialGovernance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governanceSettings: string,
      _initialGovernance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isExecutor(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lastPublishedVotingRoundId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  productionMode(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  publishPrices: {
    (
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  relay(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCurrentPrice: {
    (
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCurrentPriceFromTrustedProviders: {
    (
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _symbol: string,
      _price: number | BN | string,
      _ageSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDecimals: {
    (
      _symbol: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _symbol: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _symbol: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _symbol: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedProviders: {
    (
      _trustedProviders: string[],
      _trustedProvidersThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _trustedProviders: string[],
      _trustedProvidersThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _trustedProviders: string[],
      _trustedProvidersThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _trustedProviders: string[],
      _trustedProvidersThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTrustedPrices: {
    (
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _votingRoundId: number | BN | string,
      _feeds: {
        id: string;
        value: number | BN | string;
        decimals: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTrustedPricesWindowSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  supportsInterface(
    _interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  switchToProductionMode: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  trustedProvidersThreshold(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  updateContractAddresses: {
    (
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contractNameHashes: string[],
      _contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateSettings: {
    (
      _feedIds: string[],
      _symbols: string[],
      _trustedDecimals: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _feedIds: string[],
      _symbols: string[],
      _trustedDecimals: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _feedIds: string[],
      _symbols: string[],
      _trustedDecimals: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feedIds: string[],
      _symbols: string[],
      _trustedDecimals: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  votingEpochDurationSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    cancelGovernanceCall: {
      (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeGovernanceCall: {
      (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalizePrices: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    firstVotingRoundStartTs(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    ftsoProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAddressUpdater(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getFeedId(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFeedIds(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getFeedIdsWithDecimals(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[] }>;

    getPrice(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getPriceFromTrustedProviders(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getTrustedProviders(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    governanceSettings(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialise: {
      (
        _governanceSettings: string,
        _initialGovernance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _governanceSettings: string,
        _initialGovernance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governanceSettings: string,
        _initialGovernance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governanceSettings: string,
        _initialGovernance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isExecutor(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    lastPublishedVotingRoundId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    productionMode(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    publishPrices: {
      (
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    relay(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setCurrentPrice: {
      (
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCurrentPriceFromTrustedProviders: {
      (
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _symbol: string,
        _price: number | BN | string,
        _ageSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setDecimals: {
      (
        _symbol: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _symbol: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _symbol: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _symbol: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTrustedProviders: {
      (
        _trustedProviders: string[],
        _trustedProvidersThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _trustedProviders: string[],
        _trustedProvidersThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _trustedProviders: string[],
        _trustedProvidersThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _trustedProviders: string[],
        _trustedProvidersThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitTrustedPrices: {
      (
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _votingRoundId: number | BN | string,
        _feeds: {
          id: string;
          value: number | BN | string;
          decimals: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitTrustedPricesWindowSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    supportsInterface(
      _interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    switchToProductionMode: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    trustedProvidersThreshold(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    updateContractAddresses: {
      (
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _contractNameHashes: string[],
        _contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateSettings: {
      (
        _feedIds: string[],
        _symbols: string[],
        _trustedDecimals: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _feedIds: string[],
        _symbols: string[],
        _trustedDecimals: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _feedIds: string[],
        _symbols: string[],
        _trustedDecimals: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feedIds: string[],
        _symbols: string[],
        _trustedDecimals: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    votingEpochDurationSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
