/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FdcRequestFeeConfigurationsMockContract
  extends Truffle.Contract<FdcRequestFeeConfigurationsMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<FdcRequestFeeConfigurationsMockInstance>;
}

export interface TypeAndSourceFeeRemoved {
  name: "TypeAndSourceFeeRemoved";
  args: {
    attestationType: string;
    source: string;
    0: string;
    1: string;
  };
}

export interface TypeAndSourceFeeSet {
  name: "TypeAndSourceFeeSet";
  args: {
    attestationType: string;
    source: string;
    fee: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export type AllEvents = TypeAndSourceFeeRemoved | TypeAndSourceFeeSet;

export interface FdcRequestFeeConfigurationsMockInstance
  extends Truffle.ContractInstance {
  getRequestFee(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    getRequestFee(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
