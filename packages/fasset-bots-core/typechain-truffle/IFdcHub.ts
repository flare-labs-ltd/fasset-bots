/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFdcHubContract extends Truffle.Contract<IFdcHubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFdcHubInstance>;
}

export interface AttestationRequest {
  name: "AttestationRequest";
  args: {
    data: string;
    fee: BN;
    0: string;
    1: BN;
  };
}

export interface InflationRewardsOffered {
  name: "InflationRewardsOffered";
  args: {
    rewardEpochId: BN;
    fdcConfigurations: {
      attestationType: string;
      source: string;
      inflationShare: BN;
      minRequestsThreshold: BN;
      mode: BN;
    }[];
    amount: BN;
    0: BN;
    1: {
      attestationType: string;
      source: string;
      inflationShare: BN;
      minRequestsThreshold: BN;
      mode: BN;
    }[];
    2: BN;
  };
}

export interface RequestsOffsetSet {
  name: "RequestsOffsetSet";
  args: {
    requestsOffsetSeconds: BN;
    0: BN;
  };
}

export type AllEvents =
  | AttestationRequest
  | InflationRewardsOffered
  | RequestsOffsetSet;

export interface IFdcHubInstance extends Truffle.ContractInstance {
  fdcRequestFeeConfigurations(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  requestAttestation: {
    (_data: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_data: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestsOffsetSeconds(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    fdcRequestFeeConfigurations(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    requestAttestation: {
      (_data: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestsOffsetSeconds(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
