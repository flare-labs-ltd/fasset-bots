/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FdcVerificationMockContract
  extends Truffle.Contract<FdcVerificationMockInstance> {
  "new"(
    _relay: string,
    _fdcProtocolId: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<FdcVerificationMockInstance>;
}

export type AllEvents = never;

export interface FdcVerificationMockInstance extends Truffle.ContractInstance {
  fdcProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  relay(txDetails?: Truffle.TransactionDetails): Promise<string>;

  verifyAddressValidity(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: { addressStr: string };
        responseBody: {
          isValid: boolean;
          standardAddress: string;
          standardAddressHash: string;
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyBalanceDecreasingTransaction(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: { transactionId: string; sourceAddressIndicator: string };
        responseBody: {
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          standardPaymentReference: string;
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyConfirmedBlockHeightExists(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          blockNumber: number | BN | string;
          queryWindow: number | BN | string;
        };
        responseBody: {
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyEVMTransaction(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          transactionHash: string;
          requiredConfirmations: number | BN | string;
          provideInput: boolean;
          listEvents: boolean;
          logIndices: (number | BN | string)[];
        };
        responseBody: {
          blockNumber: number | BN | string;
          timestamp: number | BN | string;
          sourceAddress: string;
          isDeployment: boolean;
          receivingAddress: string;
          value: number | BN | string;
          input: string;
          status: number | BN | string;
          events: {
            logIndex: number | BN | string;
            emitterAddress: string;
            topics: string[];
            data: string;
            removed: boolean;
          }[];
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyPayment(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          transactionId: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
        };
        responseBody: {
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          sourceAddressHash: string;
          sourceAddressesRoot: string;
          receivingAddressHash: string;
          intendedReceivingAddressHash: string;
          spentAmount: number | BN | string;
          intendedSpentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          intendedReceivedAmount: number | BN | string;
          standardPaymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyReferencedPaymentNonexistence(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          minimalBlockNumber: number | BN | string;
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          amount: number | BN | string;
          standardPaymentReference: string;
          checkSourceAddresses: boolean;
          sourceAddressesRoot: string;
        };
        responseBody: {
          minimalBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    fdcProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    relay(txDetails?: Truffle.TransactionDetails): Promise<string>;

    verifyAddressValidity(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyBalanceDecreasingTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyConfirmedBlockHeightExists(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyEVMTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyPayment(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyReferencedPaymentNonexistence(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
