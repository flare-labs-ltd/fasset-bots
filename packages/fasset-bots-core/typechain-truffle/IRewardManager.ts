/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IRewardManagerContract
  extends Truffle.Contract<IRewardManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRewardManagerInstance>;
}

export interface RewardClaimed {
  name: "RewardClaimed";
  args: {
    beneficiary: string;
    rewardOwner: string;
    recipient: string;
    rewardEpochId: BN;
    claimType: BN;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface RewardClaimsEnabled {
  name: "RewardClaimsEnabled";
  args: {
    rewardEpochId: BN;
    0: BN;
  };
}

export interface RewardClaimsExpired {
  name: "RewardClaimsExpired";
  args: {
    rewardEpochId: BN;
    0: BN;
  };
}

export type AllEvents = RewardClaimed | RewardClaimsEnabled | RewardClaimsExpired;

export interface IRewardManagerInstance extends Truffle.ContractInstance {
  active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  autoClaim: {
    (
      _rewardOwners: string[],
      _rewardEpochId: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwners: string[],
      _rewardEpochId: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardOwners: string[],
      _rewardEpochId: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwners: string[],
      _rewardEpochId: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claim: {
    (
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochId: number | BN | string,
      _wrap: boolean,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochId: number | BN | string,
      _wrap: boolean,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochId: number | BN | string,
      _wrap: boolean,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwner: string,
      _recipient: string,
      _rewardEpochId: number | BN | string,
      _wrap: boolean,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cleanupBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  firstClaimableRewardEpochId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrentRewardEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getInitialRewardEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getNextClaimableRewardEpochId(
    _rewardOwner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRewardEpochIdToExpireNext(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRewardEpochIdsWithClaimableRewards(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getRewardEpochTotals(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

  getStateOfRewards(
    _rewardOwner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      rewardEpochId: BN;
      beneficiary: string;
      amount: BN;
      claimType: BN;
      initialised: boolean;
    }[][]
  >;

  getStateOfRewardsAt(
    _rewardOwner: string,
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      rewardEpochId: BN;
      beneficiary: string;
      amount: BN;
      claimType: BN;
      initialised: boolean;
    }[]
  >;

  getTotals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  getUnclaimedRewardState(
    _beneficiary: string,
    _rewardEpochId: number | BN | string,
    _claimType: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ initialised: boolean; amount: BN; weight: BN }>;

  initialiseWeightBasedClaims: {
    (
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  noOfInitialisedWeightBasedClaims(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    autoClaim: {
      (
        _rewardOwners: string[],
        _rewardEpochId: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwners: string[],
        _rewardEpochId: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardOwners: string[],
        _rewardEpochId: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwners: string[],
        _rewardEpochId: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claim: {
      (
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochId: number | BN | string,
        _wrap: boolean,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochId: number | BN | string,
        _wrap: boolean,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochId: number | BN | string,
        _wrap: boolean,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwner: string,
        _recipient: string,
        _rewardEpochId: number | BN | string,
        _wrap: boolean,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cleanupBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    firstClaimableRewardEpochId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentRewardEpochId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInitialRewardEpochId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getNextClaimableRewardEpochId(
      _rewardOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getRewardEpochIdToExpireNext(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getRewardEpochIdsWithClaimableRewards(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getRewardEpochTotals(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

    getStateOfRewards(
      _rewardOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        rewardEpochId: BN;
        beneficiary: string;
        amount: BN;
        claimType: BN;
        initialised: boolean;
      }[][]
    >;

    getStateOfRewardsAt(
      _rewardOwner: string,
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        rewardEpochId: BN;
        beneficiary: string;
        amount: BN;
        claimType: BN;
        initialised: boolean;
      }[]
    >;

    getTotals(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    getUnclaimedRewardState(
      _beneficiary: string,
      _rewardEpochId: number | BN | string,
      _claimType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ initialised: boolean; amount: BN; weight: BN }>;

    initialiseWeightBasedClaims: {
      (
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    noOfInitialisedWeightBasedClaims(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
